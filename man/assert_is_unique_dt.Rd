% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/assert_is_unique_dt.R
\name{assert_is_unique_dt}
\alias{assert_is_unique_dt}
\alias{identify_non_unique_dt}
\title{Are the rows of the input data.table unique?}
\usage{
assert_is_unique_dt(dt, id_cols)

identify_non_unique_dt(dt, id_cols)
}
\arguments{
\item{dt}{[\code{data.table()}]\cr
Input data.table to check rows are unique.}

\item{id_cols}{[\code{character()}]\cr
ID columns that uniquely identify each row of \code{dt}.}
}
\value{
\code{identify_non_unique_dt} returns a data.table with problematic rows
only, includes a 'count' column identifying how many times each combination
of id columns is in the dataset. \code{assert_is_unique_dt} returns nothing but
throws an error if \code{identify_non_unique_dt} returns a non empty data.table.
}
\description{
Checks to see if the rows of the input data.table are unique for each
combination of the id columns.
}
\examples{
input_dt <- data.table::data.table(location = "France", year = 2010,
                                   sex = "female",
                                   age_start = 0:95,
                                   value1 = 2, value2 = 4)
id_cols <- c("location", "year", "sex", "age_start")
non_unique_dt <- identify_non_unique_dt(input_dt, id_cols)
assert_is_unique_dt(input_dt, id_cols)

}
\seealso{
\code{assertable::assert_ids} to check that all unique combinations of
specified id variables list, this is appropriate when you expect your dataset
to be square.
}
